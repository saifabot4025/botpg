import fetch from "node-fetch";
import { getCuteDynamicReply } from "../services/gptService.js";
import { sendTelegramAlert, sendTelegramPhoto, getLineProfile } from "../services/telegramService.js";
import { getLineImage } from "../services/lineMediaService.js";
import { staffNames } from "../utils/staffNames.js";

// --- STATE ---
const userStates = {};
let globalPause = false;
let pauseBy = null;
const flexCooldown = 2 * 60 * 60 * 1000;
const greetCooldown = 10 * 60 * 1000;
const nameLockMinutes = 10;
const usedAssistantNames = {};

// --- KEYWORDS ---
const pauseKeywords = [
  "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡πÅ‡∏•‡πâ‡∏ß", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•", "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
  "‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞", "‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏¢‡∏π‡πà", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞",
  "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞", "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡πà‡∏∞", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•", "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏•‡πâ‡∏ß",
  "‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞", "‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
].map(k => k.replace(/\s/g, ""));
const unpauseKeywords = [
  "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡πÄ‡∏Ñ‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞",
  "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞",
  "‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞","‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞","‡πÄ‡∏Ñ‡∏™‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞"
].map(k => k.replace(/\s/g, ""));
const shortReplies = ["‡∏Ñ‡∏£‡∏±‡∏ö", "‡∏Ñ‡∏±‡∏ö", "‡∏Ñ‡πà‡∏∞", "‡∏Ñ‡∏∞", "‡∏Ñ‡πà‡∏≤", "‡πÄ‡∏Ñ", "ok", "‡πÇ‡∏≠‡πÄ‡∏Ñ", "‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°", "‡∏Ñ‡πà‡∏∞‡∏à‡πâ‡∏≤", "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö", "yes", "‡∏à‡πâ‡∏≤", "‡∏à‡∏±‡∏î‡πÑ‡∏õ", "‡∏Ñ‡∏£‡∏±‡∏ö‡∏ú‡∏°"];
const negativeWords = [
  "‡πÇ‡∏Å‡∏á","‡∏Ç‡πÇ‡∏°‡∏¢","‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢","‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ","‡πÅ‡∏¢‡πà","‡πÄ‡∏™‡∏µ‡∏¢‡πÉ‡∏à","‡πÇ‡∏°‡πÇ‡∏´","‡∏´‡∏±‡∏ß‡∏£‡πâ‡∏≠‡∏ô","‡πÇ‡∏î‡∏ô‡πÇ‡∏Å‡∏á","‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°‡πÇ‡∏≠‡∏ô","‡πÇ‡∏î‡∏ô‡∏´‡∏•‡∏≠‡∏Å","‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡πà","‡∏à‡∏∞‡∏ü‡πâ‡∏≠‡∏á","‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô",
  "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ñ‡∏∑‡πà‡∏≠‡∏ô","‡πÑ‡∏°‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™","‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á","‡πÑ‡∏°‡πà‡∏û‡∏≠‡πÉ‡∏à","‡πÄ‡∏´‡∏µ‡πâ‡∏¢","‡∏™‡∏±‡∏™","‡∏™‡∏±‡∏ï‡∏ß‡πå","‡∏Ñ‡∏ß‡∏≤‡∏¢","‡πÇ‡∏á‡πà","‡πÄ‡∏Æ‡∏á‡∏ã‡∏ß‡∏¢","‡∏´‡πà‡∏ß‡∏¢","‡πÑ‡∏≠‡πâ‡πÄ‡∏´‡∏µ‡πâ‡∏¢","‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏™","‡πÑ‡∏≠‡πâ‡∏™‡∏±‡∏ï‡∏ß‡πå","‡πÑ‡∏≠‡πâ‡∏Ñ‡∏ß‡∏≤‡∏¢",
  "‡πÑ‡∏≠‡πâ‡πÇ‡∏á‡πà","‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏µ","‡∏≠‡∏µ‡∏î‡∏≠‡∏Å","‡∏≠‡∏µ‡πÄ‡∏´‡∏µ‡πâ‡∏¢","‡∏≠‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏¢","‡∏≠‡∏µ‡∏™‡∏±‡∏ï‡∏ß‡πå","‡∏≠‡∏µ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏µ","‡∏≠‡∏µ‡∏™‡∏±‡∏™","‡∏ä‡∏±‡πà‡∏ß","‡∏™‡∏ñ‡∏∏‡∏ô","‡∏ñ‡πà‡∏≠‡∏¢","‡∏≠‡∏±‡∏õ‡∏£‡∏µ‡∏¢‡πå","‡∏ï‡πà‡∏≥‡∏ï‡∏°","‡∏≠‡∏µ‡πÄ‡∏ß‡∏£","‡πÄ‡∏ß‡∏£","‡∏Å‡∏£‡∏£‡∏°","‡∏≠‡∏µ‡∏ö‡πâ‡∏≤",
  "‡πÑ‡∏≠‡πâ‡∏ö‡πâ‡∏≤","‡∏Å‡∏≤‡∏Å","‡∏Å‡∏∞‡∏´‡∏£‡∏µ‡πà","‡∏£‡πà‡∏≤‡∏ô","‡πÅ‡∏°‡πà‡∏á","‡πÄ‡∏ä‡∏µ‡πà‡∏¢","‡∏°‡∏∂‡∏á","‡∏Å‡∏π","‡∏ü‡∏≤‡∏¢","‡πÅ‡∏î‡∏Å","‡∏´‡∏±‡∏ß‡∏Ñ‡∏ß‡∏¢","‡∏Ç‡∏µ‡πâ‡πÇ‡∏Å‡∏á","‡πÇ‡∏Å‡∏á‡πÅ‡∏î‡∏Å","‡∏°‡∏∂‡∏á‡πÇ‡∏Å‡∏á","‡πÄ‡∏ä‡∏µ‡πâ‡∏¢","‡∏™‡∏±‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ô","‡∏´‡∏ô‡πâ‡∏≤‡∏™‡πâ‡∏ô‡∏ï‡∏µ‡∏ô","‡πÑ‡∏£‡πâ‡∏°‡∏≤‡∏£‡∏¢‡∏≤‡∏ó",
  "‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏≤‡∏£‡∏û","‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏≤‡∏ô","‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏à","‡∏™‡πâ‡∏ô‡∏ï‡∏µ‡∏ô"
];

// --- FLEX MENU ---
function createFlexMenuContents() {
  return {
    type: "carousel",
    contents: [
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082",
          contents: [
            { type: "text", text: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å + Login", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" },
          ],
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm",
          contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "uri", label: "‚≠ê ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏≠‡∏á", uri: "https://pgthai289.net/customer/register/LINEBOT/?openExternalBrowser=1" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üì≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ", data: "register_admin" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "uri", label: "üîë ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å", uri: "https://pgthai289.net/?openExternalBrowser=1" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üö™ ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á", data: "login_backup" } },
          ],
        },
      },
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082",
          contents: [
            { type: "text", text: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" },
          ],
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm",
          contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üí∞ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ù‡∏≤‡∏Å", data: "issue_deposit" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üí∏ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ñ‡∏≠‡∏ô", data: "issue_withdraw" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üîë ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", data: "forgot_password" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üö™ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", data: "login_backup" } },
          ],
        },
      },
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082",
          contents: [
            { type: "text", text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏ó‡∏°‡πå", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô+‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏ó‡∏°‡πå ‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏ô‡∏Å‡πá‡πÑ‡∏ß‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏Å‡∏á", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" },
          ],
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm",
          contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", data: "review_withdraw" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üëë ‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", data: "max_withdraw" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üéÆ ‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢", data: "top_game" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üíé ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", data: "referral_commission" } },
          ],
        },
      },
    ],
  };
}

// --- ASSISTANT NAME (‡∏Å‡∏±‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥) ---
function pickAssistantName(userId, state) {
  const now = Date.now();
  if (state.assistantName && state.assistantNameSetAt && (now - state.assistantNameSetAt < nameLockMinutes * 60 * 1000)) {
    return state.assistantName;
  }
  let available = staffNames.filter(n => !Object.values(usedAssistantNames).includes(n));
  if (!available.length) available = staffNames;
  const newName = available[Math.floor(Math.random() * available.length)];
  usedAssistantNames[userId] = newName;
  state.assistantName = newName;
  state.assistantNameSetAt = now;
  return newName;
}
function clearAssistantName(userId) { delete usedAssistantNames[userId]; }

// --- Q/A FORM DETECT ---
function checkRegisterAdmin(text) {
  const phone = text.match(/\d{9,12}/);
  const account = text.match(/([0-9]{9,20}|wallet|‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏ó|truewallet)/i);
  const line = text.match(/([lL]ine.?id|@[\w\-_.]+|[a-zA-Z0-9]{4,})/);
  const hasName = /‡∏ä‡∏∑‡πà‡∏≠/.test(text) || /‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•/.test(text);
  return hasName && phone && account && line;
}
function checkRegisterProblem(text) {
  const phone = text.match(/\d{9,12}/);
  const hasName = /‡∏ä‡∏∑‡πà‡∏≠/.test(text) || /‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•/.test(text);
  return hasName && phone;
}
function checkDeposit(text) {
  const phone = text.match(/\d{9,12}/);
  const hasName = /‡∏ä‡∏∑‡πà‡∏≠/.test(text) || /‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•/.test(text);
  const slip = /(‡∏™‡∏•‡∏¥‡∏õ|slip|‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô|jpg|png|pdf)/i.test(text);
  return hasName && phone && slip;
}
function checkWithdraw(text) {
  const phone = text.match(/\d{9,12}/);
  const amt = text.match(/\d{2,}/);
  return phone && amt;
}
function checkLoginProblem(text) {
  const phone = text.match(/\d{9,12}/);
  const hasName = /‡∏ä‡∏∑‡πà‡∏≠/.test(text) || /‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•/.test(text);
  return hasName && phone;
}
function detectNegative(text) {
  return negativeWords.some(word => text.includes(word));
}
function logNegativeToTelegram(userId, text) {
  sendTelegramAlert(`‚ö†Ô∏è [‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö/‡∏Ñ‡∏≥‡πÅ‡∏£‡∏á] ‡∏à‡∏≤‡∏Å‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå ${userId}\n‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${text}`);
}

// --- FETCH REAL DATA ---
async function fetchRealData(query) {
  try {
    const encodedQuery = encodeURIComponent(query);
    const url = `https://www.google.com/search?q=${encodedQuery}`;
    const res = await fetch(url, {
      headers: { "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36" }
    });
    const html = await res.text();
    const match = html.match(/<span class="BNeawe[^>]*>(.*?)<\/span>/);
    return match ? match[1] : "";
  } catch (err) {
    return "";
  }
}

// --- NOTIFY ADMIN ---
async function notifyAdmin(event, msg) {
  try {
    const profile = await getLineProfile(event.source?.userId);
    const name = profile?.displayName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
    const oa = process.env.LINE_OA_NAME || "OA";
    await sendTelegramAlert(`üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ${oa}\nüë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${name}\nüí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${msg}`);
    if (event.message?.type === "image") {
      const photo = await getLineImage(event.message.id);
      if (photo) await sendTelegramPhoto(photo, `üì∑ ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (${name})`);
    }
  } catch (err) { }
}

// --- FLEX MENU AUTO ---
function shouldSendFlex(userId) {
  const state = getUserState(userId);
  return Date.now() - (state.lastFlexSent || 0) > flexCooldown;
}
function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastFlexSent: 0, lastGreeted: 0, currentCase: null, caseData: {}, lastActive: Date.now(),
      chatHistory: [], totalDeposit: 0, assistantName: null, assistantNameSetAt: 0, caseFollowUpCount: 0,
      currentForm: null
    };
  }
  return userStates[userId];
}
function updateUserState(userId, newState) {
  userStates[userId] = { ...getUserState(userId), ...newState };
}

// --- MAIN FLOW ---
async function handleCustomerFlow(event, lineClient) {
  const userId = event.source?.userId;
  const state = getUserState(userId);
  updateUserState(userId, { lastActive: Date.now() });
  const text = event.message?.text?.trim() || "";
  const checkText = text.toLowerCase().replace(/\s/g, "");

  // PAUSE/UNPAUSE
  if (pauseKeywords.some(k => checkText.includes(k))) {
    globalPause = true; pauseBy = userId;
    Object.keys(userStates).forEach(uid => updateUserState(uid, { currentForm: null, formData: {} }));
    await sendTelegramAlert(`[PAUSE] (${pauseBy}) ‡πÄ‡∏õ‡∏¥‡∏î pause`);
    return [{ type: "text", text: "‡πÇ‡∏´‡∏°‡∏î pause: ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏Ñ‡πà‡∏∞" }];
  }
  if (globalPause && unpauseKeywords.some(k => checkText.includes(k))) {
    globalPause = false; pauseBy = null;
    await sendTelegramAlert(`[UNPAUSE] (${userId}) ‡∏õ‡∏•‡∏î pause`);
    return [
      { type: "text", text: "‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏ñ‡∏≤‡∏°/‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ üíñ" },
      { type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() }
    ];
  }
  if (globalPause) {
    await sendTelegramAlert(`[DEBUG] ignore, pause by ${pauseBy}, msg="${text}"`);
    return [];
  }

  // FLEX AUTO
  if (event.type === "message" && shouldSendFlex(userId)) {
    updateUserState(userId, { lastFlexSent: Date.now() });
    return [{ type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() }];
  }

  // POSTBACK BUTTONS : FORM
  if (event.type === "postback") {
    const data = event.postback.data;
    if (data === "register_admin") {
      updateUserState(userId, { currentForm: "register_admin" });
      const askText = await getCuteDynamicReply(
        "‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏ó, LINE ID' ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏î‡∏¥‡∏°",
        pickAssistantName(userId, state)
      );
      return [
        { type: "text", text: "üì≤ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‚Äù" },
        { type: "text", text: askText }
      ];
    }
    if (data === "issue_deposit") {
      updateUserState(userId, { currentForm: "deposit" });
      const askText = await getCuteDynamicReply(
        "‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏™‡∏•‡∏¥‡∏õ/‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô' ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        pickAssistantName(userId, state)
      );
      return [
        { type: "text", text: "üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ù‡∏≤‡∏Å‚Äù" },
        { type: "text", text: askText }
      ];
    }
    if (data === "issue_withdraw") {
      updateUserState(userId, { currentForm: "withdraw" });
      const askText = await getCuteDynamicReply(
        "‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£, ‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô' ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å",
        pickAssistantName(userId, state)
      );
      return [
        { type: "text", text: "üí∏ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ñ‡∏≠‡∏ô‚Äù" },
        { type: "text", text: askText }
      ];
    }
    if (data === "forgot_password" || data === "login_backup") {
      updateUserState(userId, { currentForm: "login_problem" });
      const askText = await getCuteDynamicReply(
        "‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£' ‡∏Ç‡∏≠‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å",
        pickAssistantName(userId, state)
      );
      return [
        { type: "text", text: "üîë ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ‚Äú‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™/‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‚Äù" },
        { type: "text", text: askText }
      ];
    }
    if (data === "review_withdraw") {
      return [{ type: "text", text: await generateWithdrawReviewMessage() }];
    }
    if (data === "max_withdraw") {
      return [{ type: "text", text: await generateMaxWithdrawMessage() }];
    }
    if (data === "top_game") {
      return [{ type: "text", text: await generateTopGameMessage() }];
    }
    if (data === "referral_commission") {
      return [{ type: "text", text: await generateReferralCommissionMessage() }];
    }
    return [{ type: "text", text: "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ" }];
  }

  // FORM FLOW : ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (state.currentForm === "register_admin") {
    if (checkRegisterAdmin(text)) {
      await notifyAdmin(event, `‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô: ${text}`);
      updateUserState(userId, { currentForm: null });
      clearAssistantName(userId);
      const reply = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞", pickAssistantName(userId, state));
      return [{ type: "text", text: reply }];
    }
    return [{ type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ç‡∏ä‡∏µ/‡∏ß‡∏≠‡∏•‡πÄ‡∏•‡∏ó, LINE ID ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏∞" }];
  }
  if (state.currentForm === "deposit") {
    if (checkDeposit(text)) {
      await notifyAdmin(event, `‡∏ù‡∏≤‡∏Å: ${text}`);
      updateUserState(userId, { currentForm: null });
      clearAssistantName(userId);
      const reply = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞", pickAssistantName(userId, state));
      return [{ type: "text", text: reply }];
    }
    return [{ type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå, ‡∏™‡∏•‡∏¥‡∏õ/‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÇ‡∏≠‡∏ô ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏∞" }];
  }
  if (state.currentForm === "withdraw") {
    if (checkWithdraw(text)) {
      await notifyAdmin(event, `‡∏ñ‡∏≠‡∏ô: ${text}`);
      updateUserState(userId, { currentForm: null });
      clearAssistantName(userId);
      const reply = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞", pickAssistantName(userId, state));
      return [{ type: "text", text: reply }];
    }
    return [{ type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ + ‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏∞" }];
  }
  if (state.currentForm === "login_problem") {
    if (checkLoginProblem(text)) {
      await notifyAdmin(event, `‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô/‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™: ${text}`);
      updateUserState(userId, { currentForm: null });
      clearAssistantName(userId);
      const reply = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢", pickAssistantName(userId, state));
      return [{ type: "text", text: reply }];
    }
    return [{ type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏∞" }];
  }

  // ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ/OTP
  if (/‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ|otp|‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß|‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ï‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤/.test(text)) {
    updateUserState(userId, { currentForm: "register_problem" });
    const askText = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• '‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£/otp ‡∏Ç‡∏≠‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß", pickAssistantName(userId, state));
    return [{ type: "text", text: askText }];
  }
  if (state.currentForm === "register_problem") {
    if (checkRegisterProblem(text)) {
      await notifyAdmin(event, `‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£/otp: ${text}`);
      updateUserState(userId, { currentForm: null });
      clearAssistantName(userId);
      const reply = await getCuteDynamicReply("‡πÅ‡∏ï‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢", pickAssistantName(userId, state));
      return [{ type: "text", text: reply }];
    }
    return [{ type: "text", text: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡πà‡∏∞" }];
  }

  // SHORT REPLIES (‡∏Å‡∏±‡∏ô‡∏´‡∏≤‡∏¢)
  if (shortReplies.includes(text.trim().toLowerCase())) {
    return [
      { type: "text", text: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡πà‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏ô‡∏∞‡∏Ñ‡∏∞" }
    ];
  }

  // GREETING / FLEX
  if (event.type === "follow" || ["‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "hello", "hi"].includes(text.toLowerCase())) {
    updateUserState(userId, { lastFlexSent: Date.now() });
    await notifyAdmin(event, "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢");
    return [
      { type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() },
      { type: "text", text: `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ${pickAssistantName(userId, state)} ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö PGTHAI289 ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï` }
    ];
  }

  // DETECT ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö & Q&A GPT + Real Data
  if (detectNegative(text)) {
    logNegativeToTelegram(userId, text);
    let realData = "";
    if (text.includes("‡∏´‡∏ß‡∏¢")) realData = await fetchRealData("‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏´‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏£‡∏±‡∏ê ‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ");
    else if (text.includes("‡∏ú‡∏•‡∏ö‡∏≠‡∏•")) realData = await fetchRealData("‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
    else if (text.includes("‡∏Ç‡πà‡∏≤‡∏ß")) realData = await fetchRealData("‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
    let gptPrompt = `
‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ä‡∏∑‡πà‡∏≠ ${pickAssistantName(userId, state)} ‡∏Ç‡∏≠‡∏á PGTHAI289
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏™‡∏µ‡∏¢ (‡∏´‡∏±‡∏ß‡∏£‡πâ‡∏≠‡∏ô) ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏ö‡∏ö‡∏ô‡∏±‡∏Å‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤
‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥: 
- ‡∏ï‡∏≠‡∏ö‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à/‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏∂‡∏á‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î/‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©/‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à/‡∏õ‡∏£‡∏∞‡∏ô‡∏µ‡∏õ‡∏£‡∏∞‡∏ô‡∏≠‡∏° ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡πÇ‡∏ï‡πâ
- ‡πÄ‡∏™‡∏ô‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠/‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡∏î‡∏π‡πÅ‡∏•‡∏à‡∏£‡∏¥‡∏á
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏´‡∏•‡∏±‡∏Å + 1 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÄ‡∏™‡∏£‡∏¥‡∏°
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á: ${realData}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"
`;
    let reply = "";
    try { reply = await getCuteDynamicReply(gptPrompt, pickAssistantName(userId, state)); }
    catch { reply = "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ô‡∏∞‡∏Ñ‡∏∞"; }
    await notifyAdmin(event, text);
    return [{ type: "text", text: reply }];
  }

  // Q&A GPT + ‡∏î‡∏∂‡∏á Real Data
  let realData = "";
  if (text.includes("‡∏´‡∏ß‡∏¢")) realData = await fetchRealData("‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î ‡∏´‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢‡∏£‡∏±‡∏ê ‡∏á‡∏ß‡∏î‡∏ô‡∏µ‡πâ");
  else if (text.includes("‡∏ú‡∏•‡∏ö‡∏≠‡∏•")) realData = await fetchRealData("‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
  else if (text.includes("‡∏Ç‡πà‡∏≤‡∏ß")) realData = await fetchRealData("‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ");
  else if (text.length > 5) realData = await fetchRealData(text);

  let gptPrompt = `‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ä‡∏∑‡πà‡∏≠ ${pickAssistantName(userId, state)} ‡∏Ç‡∏≠‡∏á PGTHAI289
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î ‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
- ‡∏ï‡∏≠‡∏ö Q ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
- ‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö ‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô‡πÜ
- ‡∏à‡∏≥‡∏Å‡∏±‡∏î 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á: ${realData}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${text}"`;

  let gptReply = "";
  try { gptReply = await getCuteDynamicReply(gptPrompt, pickAssistantName(userId, state)); }
  catch { gptReply = "‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏°. üíï"; }
  await notifyAdmin(event, text || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏£‡∏π‡∏õ");
  return [{ type: "text", text: gptReply }];
}

// --- CRM FOLLOW-UP ---
function initCRM(lineClient) {
  setInterval(async () => {
    const now = Date.now();
    const followupPeriods = [
      { days: 3, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 3 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û" },
      { days: 7, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 7 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏î‡∏µ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà" },
      { days: 15, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 15 ‡∏ß‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô" },
      { days: 30, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 30 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏î‡πá‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà" },
    ];
    for (const period of followupPeriods) {
      const inactive = Object.keys(userStates).filter(
        uid => now - (userStates[uid]?.lastActive || 0) > period.days * 24 * 60 * 60 * 1000
      );
      for (const uid of inactive) {
        try {
          const state = getUserState(uid);
          const name = pickAssistantName(uid, state);
          const msg = await getCuteDynamicReply(period.prompt, name);
          await lineClient.pushMessage(uid, { type: "text", text: msg });
          await lineClient.pushMessage(uid, { type: "flex", altText: "üéÄ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üéÄ", contents: createFlexMenuContents() });
          await sendTelegramAlert(`üì¢ CRM (${period.days} ‡∏ß‡∏±‡∏ô) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤: ${uid}`);
          updateUserState(uid, { lastActive: Date.now() });
        } catch (err) { }
      }
    }
  }, 6 * 60 * 60 * 1000);
}

// --- EXPORT ---
export { handleCustomerFlow, createFlexMenuContents, initCRM };
