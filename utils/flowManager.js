// utils/flowManager.js
import { getCuteDynamicReply } from "../services/gptService.js";
import { sendTelegramAlert, sendTelegramPhoto, getLineProfile } from "../services/telegramService.js";
import { getLineImage } from "../services/lineMediaService.js";

// ================== STATE ==================
const userStates = {};
const userPausedStates = {};
const flexCooldown = 2 * 60 * 60 * 1000;

function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastFlexSent: 0,
      currentCase: null,
      caseData: {},
    };
  }
  return userStates[userId];
}

function updateUserState(userId, newState) {
  userStates[userId] = { ...getUserState(userId), ...newState };
}

function shouldSendFlex(userId) {
  const state = getUserState(userId);
  return Date.now() - state.lastFlexSent > flexCooldown;
}

// ================== UTILITIES ==================
function randomMaskedPhone() {
  const prefix = "08";
  const suffix = Math.floor(1000 + Math.random() * 9000);
  return `${prefix}xxxx${suffix}`;
}

function randomTimeWithinLast30Min() {
  const now = new Date();
  const past = new Date(now.getTime() - Math.floor(Math.random() * 30 * 60000));
  return `${String(past.getHours()).padStart(2, "0")}:${String(past.getMinutes()).padStart(2, "0")}`;
}

async function notifyAdmin(event, message) {
  try {
    const profile = await getLineProfile(event.source?.userId);
    const displayName = profile?.displayName || event.source?.userId || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
    const oaName = process.env.LINE_OA_NAME || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö OA";
    await sendTelegramAlert(`üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ${oaName}\nüë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${displayName}\nüí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}`);
    if (event.message?.type === "image") {
      const img = await getLineImage(event.message.id);
      if (img) await sendTelegramPhoto(img, `üì∑ ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (${displayName})`);
    }
  } catch (e) {
    console.error("notifyAdmin Error:", e);
  }
}

// ================== STATIC MESSAGES ==================
let cachedMaxWithdrawDate = null;
let cachedMaxWithdrawAmount = null;

async function generateWithdrawReviewMessage() {
  const list = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amount = (Math.floor(Math.random() * 45000) + 5000).toLocaleString();
    list.push(`‡∏¢‡∏π‡∏™ ${phone} ‡∏ñ‡∏≠‡∏ô ${amount} ‡πÄ‡∏ß‡∏•‡∏≤ ${randomTimeWithinLast30Min()}`);
  }
  return `üìä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤\n\n${list.join("\n")}`;
}

async function generateMaxWithdrawMessage() {
  const today = new Date().toLocaleDateString("th-TH");
  if (cachedMaxWithdrawDate !== today) {
    cachedMaxWithdrawDate = today;
    cachedMaxWithdrawAmount = Math.floor(Math.random() * 200000) + 300000;
  }
  return `üëë ‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà "‡∏™‡∏°‡∏ä‡∏≤‡∏¢" ‡∏¢‡∏π‡∏™ ${randomMaskedPhone()} ‡∏ñ‡∏≠‡∏ô ${cachedMaxWithdrawAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${cachedMaxWithdrawDate}`;
}

async function generateTopGameMessage() {
  const games = ["‡∏™‡∏≤‡∏ß‡∏ñ‡πâ‡∏≥", "‡∏Å‡∏¥‡πÄ‡∏•‡∏ô", "Lucky Neko", "Fortune Ox", "Dragon Hatch", "Fortune Rabbit"];
  const selected = games.sort(() => 0.5 - Math.random()).slice(0, 5);
  let msg = "üé≤ ‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n";
  selected.forEach((g, i) => (msg += `${i + 1}. ${g} - ${Math.floor(Math.random() * 50) + 50}%\n`));
  msg += `\nüí• ‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${(Math.floor(Math.random() * 180000) + 20000).toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  msg += `üí• ‡∏õ‡∏±‡πà‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${(Math.floor(Math.random() * 47000) + 3000).toLocaleString()} ‡∏ö‡∏≤‡∏ó`;
  return msg;
}

async function generateReferralCommissionMessage() {
  const list = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amount = (Math.floor(Math.random() * 97000) + 3000).toLocaleString();
    list.push(`‡∏¢‡∏π‡∏™ ${phone} ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ${amount}`);
  }
  return `ü§ù ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\n${list.join("\n")}\n\nüí° ‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô!`;
}

// ================== GPT INTENT ==================
async function analyzeUserIntent(text) {
  const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Intent ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: "problem" (‡∏õ‡∏±‡∏ç‡∏´‡∏≤), "finance" (‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô), "register" (‡∏™‡∏°‡∏±‡∏Ñ‡∏£), "general_question" (‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ), "emotion" (‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå)
- ‡∏ï‡∏≠‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô {"intent":"emotion","summary":"‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏¥‡∏ß"}
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"
`;
  try {
    const result = await getCuteDynamicReply(prompt);
    return JSON.parse(result);
  } catch {
    return { intent: "unknown", summary: text };
  }
}

async function generateSmartReply(text) {
  const intent = await analyzeUserIntent(text);
  let prompt = "";
  if (intent.intent === "emotion")
    prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å ${intent.summary} ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢ ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ pgthai289 ‡πÄ‡∏ö‡∏≤‡πÜ`;
  else if (intent.intent === "general_question")
    prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏° ${intent.summary} ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô pgthai289`;
  else if (intent.intent === "register")
    prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ pgthai289 ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û`;
  else if (intent.intent === "finance")
    prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (${intent.summary}) ‡∏ï‡∏≠‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ‡∏ù‡∏≤‡∏Å‡∏ñ‡∏≠‡∏ô pgthai289 ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô`;
  else if (intent.intent === "problem")
    prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (${intent.summary}) ‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤`;
  else
    prompt = `‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ pgthai289 ‡πÄ‡∏ö‡∏≤‡πÜ: "${text}"`;

  return await getCuteDynamicReply(prompt);
}

// ================== POSTBACK MAP ==================
const caseMap = {
  register_admin: "register_admin",
  login_backup: "login_backup",
  issue_deposit: "issue_deposit",
  issue_withdraw: "issue_withdraw",
  forgot_password: "forgot_password",
  promo_info: "promo_info",
  review_withdraw: "review_withdraw",
  max_withdraw: "max_withdraw",
  top_game: "top_game",
  referral_commission: "referral_commission",
};

// ================== HANDLE FLOW ==================
export async function handleCustomerFlow(event) {
  const userId = event.source?.userId;
  const state = getUserState(userId);
  const replyMessages = [];
  const userText = event.message?.text?.trim() || "";

  // ‡∏ñ‡πâ‡∏≤ pause ‡∏≠‡∏¢‡∏π‡πà ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏õ‡∏•‡∏î
  if (userPausedStates[userId]) {
    if (userText.includes("‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞‡∏Ñ‡∏∞‡∏û‡∏µ‡πà")) {
      userPausedStates[userId] = false;
      updateUserState(userId, { currentCase: null, caseData: {} });
      replyMessages.push({ type: "text", text: "‡∏ô‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üíï" });
    } else {
      replyMessages.push({ type: "text", text: "‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏≥‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï" });
    }
    return replyMessages;
  }

  // ‚úÖ Postback Handling
  if (event.type === "postback" && event.postback?.data) {
    const data = event.postback.data;
    replyMessages.push({ type: "text", text: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${data}` });

    if (["review_withdraw", "max_withdraw", "top_game", "referral_commission"].includes(data)) {
      if (data === "review_withdraw") replyMessages.push({ type: "text", text: await generateWithdrawReviewMessage() });
      if (data === "max_withdraw") replyMessages.push({ type: "text", text: await generateMaxWithdrawMessage() });
      if (data === "top_game") replyMessages.push({ type: "text", text: await generateTopGameMessage() });
      if (data === "referral_commission") replyMessages.push({ type: "text", text: await generateReferralCommissionMessage() });
      return replyMessages;
    }

    if (caseMap[data]) {
      updateUserState(userId, { currentCase: caseMap[data], caseData: {} });
      let askText = "";
      if (data === "register_admin") askText = "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ç‡∏ä‡∏µ/‡∏ß‡∏≠‡πÄ‡∏•‡∏ó + ‡πÑ‡∏•‡∏ô‡πå‡πÑ‡∏≠‡∏î‡∏µ ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞ üíï";
      if (data === "login_backup") askText = "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠+‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï";
      if (data === "issue_deposit") askText = "‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠+‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏∞ üíï";
      if (data === "issue_withdraw") askText = "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ ‡∏£‡∏≠ 3-5 ‡∏ô‡∏≤‡∏ó‡∏µ üíï";
      if (data === "forgot_password") askText = "‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠+‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ üíï";
      if (data === "promo_info") askText = "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏õ‡∏£‡∏ù‡∏≤‡∏Å‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡∏Ñ‡∏∑‡∏ô‡∏¢‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢ ‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏õ‡∏£‡πÑ‡∏´‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞ üíï";
      replyMessages.push({ type: "text", text: askText });
      return replyMessages;
    }
  }

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ currentCase ‡πÅ‡∏•‡∏∞‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  if (state.currentCase && !userPausedStates[userId]) {
    if (userText.length > 5) {
      await notifyAdmin(event, `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏Ñ‡∏™ ${state.currentCase}): ${userText}`);
      replyMessages.push({ type: "text", text: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï" });
      replyMessages.push({ type: "text", text: "‚ú® ‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏ù‡∏≤‡∏Å‡∏ñ‡∏≠‡∏ô‡∏≠‡∏≠‡πÇ‡∏ï‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞!" });
      userPausedStates[userId] = true;
      return replyMessages;
    } else {
      replyMessages.push({ type: "text", text: "‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡πÅ‡∏à‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï" });
      return replyMessages;
    }
  }

  // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí Intent + GPT
  if (event.type === "message") {
    if (shouldSendFlex(userId)) {
      updateUserState(userId, { lastFlexSent: Date.now() });
      replyMessages.push({ type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() });
    }
    const gptReply = await generateSmartReply(userText);
    replyMessages.push({ type: "text", text: gptReply });
    return replyMessages;
  }

  return replyMessages;
}

// (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createFlexMenuContents ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ)
function createFlexMenuContents() {
  return { type: "carousel", contents: [] }; // ‡πÉ‡∏™‡πà flex menu ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
}
