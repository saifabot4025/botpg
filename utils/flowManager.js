// utils/flowManager.js
import { getCuteDynamicReply } from "../services/gptService.js";
import { sendTelegramAlert, sendTelegramPhoto, getLineProfile } from "../services/telegramService.js";
import { getLineImage } from "../services/lineMediaService.js";

const userStates = {};
const userPausedStates = {};
const flexCooldown = 2 * 60 * 60 * 1000;

function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastFlexSent: 0,
      currentCase: null,
      caseData: {},
    };
  }
  return userStates[userId];
}

function updateUserState(userId, newState) {
  userStates[userId] = {
    ...getUserState(userId),
    ...newState,
  };
}

// ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Intent
async function analyzeUserIntent(userText) {
  const analysisPrompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Intent ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö: "problem" (‡∏õ‡∏±‡∏ç‡∏´‡∏≤), "finance" (‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏ù‡∏≤‡∏Å ‡∏ñ‡∏≠‡∏ô), "register" (‡∏™‡∏°‡∏±‡∏Ñ‡∏£), "general_question" (‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ), ‡∏´‡∏£‡∏∑‡∏≠ "emotion" (‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå/‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å)
- ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô:
{ "intent": "emotion", "summary": "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏¥‡∏ß" }

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${userText}"
`;
  try {
    const analysisResult = await getCuteDynamicReply(analysisPrompt);
    try {
      return JSON.parse(analysisResult);
    } catch {
      return { intent: "unknown", summary: userText };
    }
  } catch (err) {
    console.error("analyzeUserIntent Error:", err);
    return { intent: "unknown", summary: userText };
  }
}

// ‡∏ï‡∏≠‡∏ö‡∏ï‡∏≤‡∏° Intent
async function generateSmartReply(userText) {
  const intentData = await analyzeUserIntent(userText);
  let prompt = "";
  switch (intentData.intent) {
    case "emotion":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö pgthai289 ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô ‡πÜ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏¢‡∏±‡∏î‡πÄ‡∏¢‡∏µ‡∏¢‡∏î`;
      break;
    case "general_question":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö pgthai289 ‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÜ`;
      break;
    case "register":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
‡∏ï‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å pgthai289 ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏ß‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏•‡∏¢`;
      break;
    case "finance":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏ñ‡∏≠‡∏ô (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏≤‡∏Å‡∏ñ‡∏≠‡∏ô pgthai289 ‡πÅ‡∏ö‡∏ö‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`;
      break;
    case "problem":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô`;
      break;
    default:
      prompt = `‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô pgthai289 ‡πÄ‡∏ö‡∏≤ ‡πÜ: "${userText}"`;
      break;
  }
  return await getCuteDynamicReply(prompt);
}

// echo ‡∏õ‡∏∏‡πà‡∏° postback
function pushEchoPostbackMessage(replyMessages, postbackData) {
  replyMessages.push({ type: "text", text: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${postbackData}` });
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á flex ‡πÑ‡∏´‡∏°
function shouldSendFlex(userId) {
  const state = getUserState(userId);
  return Date.now() - state.lastFlexSent > flexCooldown;
}

// main flow
export async function handleCustomerFlow(event) {
  const userId = event.source?.userId;
  const state = getUserState(userId);
  const replyMessages = [];
  const userText = event.message?.text?.trim() || "";

  // echo ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô message action
  if (event.type === "message" && userText) {
    const predefinedButtons = ["‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏≠‡∏á", "‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å", "‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á"];
    if (predefinedButtons.includes(userText)) {
      replyMessages.push({ type: "text", text: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${userText}` });
    }
  }

  if (event.type === "postback" && event.postback?.data) {
    pushEchoPostbackMessage(replyMessages, event.postback.data);
  }

  // ‡∏ï‡∏≠‡∏ö GPT ‡∏î‡πâ‡∏ß‡∏¢ Intent
  try {
    let gptReply = await generateSmartReply(userText || event.postback?.data || "");
    replyMessages.push({ type: "text", text: gptReply });
  } catch (e) {
    replyMessages.push({ type: "text", text: "‡∏ô‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Ñ‡πà‡∏∞ üíï" });
  }

  return replyMessages;
}
