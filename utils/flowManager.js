// ==================== IMPORT ====================
import fetch from "node-fetch";
import { getCuteDynamicReply } from "../services/gptService.js";
import { sendTelegramAlert, sendTelegramPhoto, getLineProfile } from "../services/telegramService.js";
import { getLineImage } from "../services/lineMediaService.js";
import fs from "fs";

// ==================== STATE ====================
const userStates = {};
const userPausedStates = {};
const userPauseTimestamp = {};
const flexCooldown = 2 * 60 * 60 * 1000;
const greetCooldown = 10 * 60 * 1000;
const pauseAutoResume = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
let globalPause = false; // Pause ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö (admin mode)

const assistantNames = ["‡∏ô‡πâ‡∏≠‡∏á‡∏ü‡∏≤‡∏á", "‡∏ô‡πâ‡∏≠‡∏á‡∏õ‡∏∏‡∏¢", "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏û‡∏£‡∏ß", "‡∏ô‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏¢‡∏î‡πå", "‡∏ô‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ß", "‡∏ô‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ß‡∏≤‡∏ô", "‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏û‡∏°", "‡∏ô‡πâ‡∏≠‡∏á‡∏à‡πã‡∏≤"];
function getRandomAssistantName() {
  return assistantNames[Math.floor(Math.random() * assistantNames.length)];
}
function analyzeSentiment(text) {
  const flirtWords = ["‡∏Ñ‡∏¥‡∏î‡∏ñ‡∏∂‡∏á", "‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡∏ä‡∏≠‡∏ö‡∏ô‡∏∞", "‡∏à‡∏µ‡∏ö", "‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ü‡∏ô", "‡∏£‡∏±‡∏Å"];
  const adultWords = ["‡∏à‡∏π‡∏ö", "‡∏Å‡∏≠‡∏î", "‡∏´‡πâ‡∏≠‡∏á", "18+", "‡πÄ‡∏ã‡πá‡∏Å", "‡πÄ‡∏™‡∏µ‡∏¢‡∏ß", "xxx"];
  const angryWords = ["‡πÇ‡∏Å‡∏á", "‡πÄ‡∏´‡∏µ‡πâ‡∏¢", "‡∏™‡∏±‡∏™", "‡∏Ñ‡∏ß‡∏¢", "‡∏´‡πà‡∏ß‡∏¢", "‡∏Å‡∏≤‡∏Å", "‡πÇ‡∏°‡πÇ‡∏´", "‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢"];
  if (angryWords.some(w => text.includes(w))) return "angry";
  if (flirtWords.some(w => text.includes(w))) return "flirt";
  if (adultWords.some(w => text.includes(w))) return "adult";
  if (text.endsWith("?")) return "info";
  return "neutral";
}
function limitSentences(text, maxSentences = 2) {
  const sentences = text.split(/(?<=[.!?])\s+/);
  return sentences.slice(0, maxSentences).join(" ");
}
function sanitizeReply(reply, assistantName) {
  return reply.replace(/‡∏ô‡πâ‡∏≠‡∏á[^\s]+/g, assistantName);
}
function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastFlexSent: 0,
      lastGreeted: 0,
      currentCase: null,
      caseData: {},
      lastActive: Date.now(),
      chatHistory: [],
      totalDeposit: 0,
      assistantName: getRandomAssistantName(),
      caseFollowUpCount: 0
    };
  }
  return userStates[userId];
}
function updateUserState(userId, newState) {
  userStates[userId] = { ...getUserState(userId), ...newState };
}
function shouldSendFlex(userId) {
  const state = getUserState(userId);
  return Date.now() - state.lastFlexSent > flexCooldown;
}
function shouldGreet(userId) {
  const state = getUserState(userId);
  return Date.now() - state.lastGreeted > greetCooldown;
}
function randomMaskedPhone() {
  const prefix = "08";
  const suffix = Math.floor(1000 + Math.random() * 9000);
  return `${prefix}xxxx${suffix}`;
}

// =========== FETCH ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (DuckDuckGo, ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•) ===========
async function fetchRealData(query) {
  const footballData = await fetchFootballData(query);
  if (footballData) return footballData;
  try {
    const url = "https://api.duckduckgo.com/?q=" + encodeURIComponent(query) + "&format=json";
    const res = await fetch(url);
    const json = await res.json();
    if (json.AbstractText) return json.AbstractText;
    if (json.RelatedTopics?.length) return json.RelatedTopics[0]?.Text || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á";
  } catch (err) {
    return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ";
  }
}
async function fetchFootballData(query) {
  try {
    if (/‡∏ú‡∏•‡∏ö‡∏≠‡∏•|‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏™‡∏î|score|live/i.test(query)) {
      const res = await fetch("https://www.ballchud.com/api/schedule/today");
      const json = await res.json();
      const matches = (json?.data || []).slice(0, 5).map(
        m => `${m.league} ‡∏Ñ‡∏π‡πà ${m.team_home} vs ${m.team_away} ‡πÄ‡∏ß‡∏•‡∏≤ ${m.time} ‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ${m.score_home}-${m.score_away}`
      ).join("\n");
      return matches || "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞";
    }
    if (/‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏≠‡∏•|‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•|fixtures/i.test(query)) {
      const res = await fetch("https://www.ballchud.com/api/schedule/today");
      const json = await res.json();
      const matches = (json?.data || []).slice(0, 5).map(
        m => `${m.league} : ${m.team_home} vs ${m.team_away} ‡πÄ‡∏ß‡∏•‡∏≤ ${m.time}`
      ).join("\n");
      return matches || "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞";
    }
    return "";
  } catch (err) {
    return "";
  }
}

// =========== Prompt Master ===========
function buildPrompt(assistantName, historyContext, realData, sentiment, text) {
  let roleDesc = `‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏ä‡∏∑‡πà‡∏≠ ${assistantName} ‡∏Ç‡∏≠‡∏á PGTHAI289\n`;
  roleDesc += `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∏‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤:\n${historyContext}\n`;
  roleDesc += `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ): ${realData}\n`;

  if (sentiment === "angry") {
    return `${roleDesc}
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏Å‡∏£‡∏ò‡∏´‡∏£‡∏∑‡∏≠‡∏î‡πà‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à ‡πÉ‡∏ä‡πâ‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ö‡∏≤‡∏¢‡πÉ‡∏à ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
1. ‡∏ü‡∏±‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à
2. ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö PGTHAI289 ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
3. ‡πÄ‡∏™‡∏ô‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`;
  }
  if (sentiment === "flirt") {
    return `${roleDesc}
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏µ‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢
1. ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏≠‡πâ‡∏≠‡∏ô‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á
2. ‡πÉ‡∏™‡πà‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏™‡∏ô‡∏∏‡∏Å‡∏™‡∏ô‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏≤‡∏ö‡∏Ñ‡∏≤‡∏¢
3. ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`;
  }
  if (sentiment === "adult") {
    return `${roleDesc}
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á 18+ ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ã‡∏ß‡πÜ ‡∏Ç‡∏µ‡πâ‡πÄ‡∏•‡πà‡∏ô ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡πà‡∏≠‡∏≠‡∏ô‡∏≤‡∏à‡∏≤‡∏£
1. ‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏Ç‡∏≥‡πÜ ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏´‡∏¢‡∏≤‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡πà‡∏≠‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡πÄ‡∏û‡∏®
2. ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á
3. ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`;
  }
  if (sentiment === "info") {
    return `${roleDesc}
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏â‡∏•‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
1. ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
2. ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö PGTHAI289 ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ô‡∏µ‡∏¢‡∏ô
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`;
  }
  return `${roleDesc}
‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà: ‡∏ï‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏â‡∏•‡∏≤‡∏î
1. ‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô
2. ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Soft Sell ‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`;
}

// =========== MESSAGE GENERATORS ===========
async function generateWithdrawReviewMessage() {
  const reviews = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amt = (Math.floor(Math.random() * 45000) + 5000).toLocaleString();
    reviews.push(`‡∏¢‡∏π‡∏™ ${phone} ‡∏ñ‡∏≠‡∏ô ${amt}`);
  }
  return `üìä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n\n${reviews.join("\n")}\n\n‡πÄ‡∏ß‡πá‡∏ö‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á üíï`;
}
async function generateMaxWithdrawMessage() {
  const today = new Date().toLocaleDateString("th-TH", { timeZone: "Asia/Bangkok" });
  if (!global.cachedDate || global.cachedDate !== today) {
    global.cachedDate = today;
    const names = [...assistantNames, "‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥", "‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏ì‡∏±‡∏ê‡∏û‡∏•", "‡∏ò‡∏µ‡∏£‡∏†‡∏±‡∏ó‡∏£"];
    global.cachedName = names[Math.floor(Math.random() * names.length)];
    global.cachedAmt = Math.floor(Math.random() * 200000) + 300000;
  }
  return `üëë ‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì "${global.cachedName}" ‡∏¢‡∏π‡∏™ ${randomMaskedPhone()} ‡∏ñ‡∏≠‡∏ô ${global.cachedAmt.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${today}`;
}
async function generateTopGameMessage() {
  const games = [
    "Graffiti Rush ‚Ä¢ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏ï‡∏µ‡πâ ‡∏£‡∏±‡∏ä",
    "Treasures of Aztec ‚Ä¢ ‡∏™‡∏≤‡∏ß‡∏ñ‡πâ‡∏≥",
    "Fortune Ox ‚Ä¢ ‡∏ß‡∏±‡∏ß‡πÇ‡∏î‡∏î",
    "Fortune Snake ‚Ä¢ ‡∏á‡∏π‡∏ó‡∏≠‡∏á",
    "Fortune Rabbit ‚Ä¢ ‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†",
    "Lucky Neko ‚Ä¢ ‡πÅ‡∏°‡∏ß‡∏Å‡∏ß‡∏±‡∏Å",
    "Fortune Mouse ‚Ä¢ ‡∏´‡∏ô‡∏π‡∏ó‡∏≠‡∏á",
    "Dragon Hatch ‚Ä¢ ‡∏£‡∏±‡∏á‡∏°‡∏±‡∏á‡∏Å‡∏£",
    "Wild Bounty Showdown ‚Ä¢ ‡∏Ñ‡∏≤‡∏ß‡∏ö‡∏≠‡∏¢",
    "Ways of the Qilin ‚Ä¢ ‡∏Å‡∏¥‡πÄ‡∏•‡∏ô",
    "Galaxy Miner ‚Ä¢ ‡∏ô‡∏±‡∏Å‡∏Ç‡∏∏‡∏î‡∏≠‡∏ß‡∏Å‡∏≤‡∏®",
    "Incan Wonders ‚Ä¢ ‡∏™‡∏¥‡πà‡∏á‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏≤",
    "Diner Frenzy Spins ‚Ä¢ ‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏õ‡∏±‡∏á",
    "Dragon's Treasure Quest ‚Ä¢ ‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
    "Jack the Giant Hunter ‚Ä¢ ‡πÅ‡∏à‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏Ü‡πà‡∏≤‡∏¢‡∏±‡∏Å‡∏©‡πå"
  ];
  const selected = games.sort(() => 0.5 - Math.random()).slice(0, 5);
  const freeSpin = Math.floor(Math.random() * (500000 - 50000)) + 50000;
  const normal = Math.floor(Math.random() * (50000 - 5000)) + 5000;
  let msg = "üé≤ ‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n";
  selected.forEach((g, i) => msg += `${i + 1}. ${g} - ${Math.floor(Math.random() * 20) + 80}%\n`);
  msg += `\nüí• ‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${freeSpin.toLocaleString()} ‡∏ö‡∏≤‡∏ó\nüí• ‡∏õ‡∏±‡πà‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${normal.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏•‡∏¢ ‡πÅ‡∏ï‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á üíï`;
  return msg;
}
async function generateReferralCommissionMessage() {
  const lines = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amt = (Math.floor(Math.random() * 97000) + 3000).toLocaleString();
    lines.push(`‡∏¢‡∏π‡∏™ ${phone} ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô ${amt}`);
  }
  return `ü§ù ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\n${lines.join("\n")}\n\nüí° ‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô!`;
}

// =========== FLEX MENU ==============
function createFlexMenuContents() {
  return {
    type: "carousel",
    contents: [
      // BOX 1
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", contents: [
            { type: "text", text: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å + Login", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏£‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ü‡∏£‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ ‡∏´‡∏≤‡∏Å‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÉ‡∏î‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" },
          ]
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm", contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "uri", label: "‚≠ê ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏≠‡∏á", uri: "https://pgthai289.net/customer/register/LINEBOT/?openExternalBrowser=1" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üì≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ", data: "register_admin" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "uri", label: "üîë ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å", uri: "https://pgthai289.net/?openExternalBrowser=1" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üö™ ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á", data: "login_backup" } }
          ]
        }
      },
      // BOX 2
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", contents: [
            { type: "text", text: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" },
          ]
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm", contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üí∞ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ù‡∏≤‡∏Å/‡∏ñ‡∏≠‡∏ô", data: "issue_deposit" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üîë ‡∏•‡∏∑‡∏°‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", data: "forgot_password" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üö™ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ", data: "login_backup" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üéÅ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô/‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", data: "promo_info" } }
          ]
        }
      },
      // BOX 3
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", contents: [
            { type: "text", text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô + ‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏ó‡∏°‡πå", weight: "bold", size: "lg", color: "#FFFFFF" },
            { type: "text", text: "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô+‡πÇ‡∏ö‡∏ô‡∏±‡∏™‡πÑ‡∏ó‡∏°‡πå ‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏£‡∏≤‡∏à‡πà‡∏≤‡∏¢‡∏ä‡∏±‡∏ß‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏≤‡∏ô‡∏Å‡πá‡πÑ‡∏ß‡πÑ‡∏£‡πâ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÇ‡∏Å‡∏á", size: "sm", color: "#FFFFFF", wrap: true, margin: "md" }
          ]
        },
        footer: {
          type: "box", layout: "vertical", backgroundColor: "#4B0082", spacing: "sm", contents: [
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "‚≠ê ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", data: "review_withdraw" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üëë ‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", data: "max_withdraw" } },
            { type: "button", style: "primary", color: "#000000", action: { type: "postback", label: "üéÆ ‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢", data: "top_game" } },
            { type: "button", style: "secondary", color: "#FFD700", action: { type: "postback", label: "üíé ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", data: "referral_commission" } }
          ]
        }
      }
    ]
  };
}

// =============== PAUSE AUTO RESUME (5 ‡∏ô‡∏≤‡∏ó‡∏µ) =================
async function tryResumeFromPause(userId, lineClient) {
  if (userPausedStates[userId] && userPauseTimestamp[userId]) {
    const now = Date.now();
    if (now - userPauseTimestamp[userId] > pauseAutoResume) {
      userPausedStates[userId] = false;
      userPauseTimestamp[userId] = null;
      updateUserState(userId, { currentCase: null, caseData: {}, caseFollowUpCount: 0 });
      await lineClient.pushMessage(userId, {
        type: "text",
        text: "‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏Ç‡∏±‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÅ‡∏à‡πâ‡∏á‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏∏‡∏Å‡∏Ç‡πå‡∏Å‡πá‡∏ö‡∏≠‡∏Å‡∏ô‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡πâ‡∏≤ üíï"
      });
    }
  }
}

// =============== MAIN FLOW MANAGER =================
export async function handleCustomerFlow(event, lineClient) {
  if (globalPause) return []; // **‡∏ñ‡πâ‡∏≤ pause ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö**
  const userId = event.source?.userId;
  const state = getUserState(userId);
  updateUserState(userId, { lastActive: Date.now() });
  const reply = [];
  const text = event.message?.text?.trim() || "";

  await tryResumeFromPause(userId, lineClient);

  if (userPausedStates[userId]) return [];

  // == Negative Words ‡∏ï‡∏≠‡∏ö‡∏à‡∏¥‡∏ï‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤/‡∏≠‡πâ‡∏≠‡∏ô ==
  const negativeWords = [
    "‡πÇ‡∏Å‡∏á", "‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏Å‡∏á", "‡πÄ‡∏ß‡πá‡∏ö‡∏´‡πà‡∏ß‡∏¢", "‡∏Ç‡∏µ‡πâ‡πÇ‡∏Å‡∏á", "‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢", "‡πÄ‡∏ä‡∏¥‡∏î‡πÄ‡∏á‡∏¥‡∏ô", "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏°‡πà‡∏î‡∏µ", "‡πÇ‡∏î‡∏ô‡πÇ‡∏Å‡∏á",
    "‡πÅ‡∏°‡πà‡∏á", "‡∏™‡∏±‡∏™", "‡πÄ‡∏´‡∏µ‡πâ‡∏¢", "‡∏ä‡∏¥‡∏ö‡∏´‡∏≤‡∏¢", "‡∏Å‡∏≤‡∏Å", "‡πÄ‡∏•‡∏ß", "‡πÑ‡∏≠‡πâ", "‡πÇ‡∏á‡πà", "‡∏Ñ‡∏ß‡∏¢", "‡∏ü‡∏≤‡∏¢",
    "‡∏´‡∏°‡∏î‡∏ï‡∏±‡∏ß", "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏°‡∏î", "‡∏ó‡∏∏‡∏ô‡∏´‡∏≤‡∏¢", "‡∏´‡∏°‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à", "‡πÄ‡∏à‡πä‡∏á", "‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡πÇ‡∏î‡∏ô‡∏Å‡∏¥‡∏ô‡∏´‡∏°‡∏î",
    "‡πÄ‡∏ß‡πá‡∏ö‡πÄ‡∏ä‡∏µ‡πâ‡∏¢", "‡πÄ‡∏ß‡πá‡∏ö‡∏Ñ‡∏ß‡∏¢", "‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏Å", "‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏Å", "‡πÑ‡∏°‡πà‡πÅ‡∏à‡∏Å", "‡∏´‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡∏Å", "‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏¢‡πà",
    "‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢", "‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏¢‡∏∞", "‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏°‡∏î‡∏ï‡∏π‡∏î", "‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏°‡∏î", "‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏°‡∏î", "‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏à‡πä‡∏á"
  ];
  if (negativeWords.some(word => text.includes(word))) {
    const apologyReply = await getCuteDynamicReply(
      `‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó: ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡∏≤‡∏ß‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏Ç‡∏≠‡∏á PGTHAI289
‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥:
1. ‡∏ü‡∏±‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡πÄ‡∏™‡∏µ‡∏¢
2. ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏≤‡∏ß‡πà‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏Å‡∏á ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ß‡πà‡∏≤ PGTHAI289 ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô
3. ‡∏ñ‡πâ‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏¢‡∏≠‡∏∞ ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏≠‡∏ö‡πÉ‡∏à‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏™‡∏ï‡∏¥ 
4. ‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏î‡πâ 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
5. ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${text}"`
    );
    return [{ type: "text", text: apologyReply }];
  }

  // == Admin ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏Ñ‡πà‡∏∞" > Pause
  if (text.replace(/\s/g, "").includes("‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏Ñ‡πà‡∏∞")) {
    userPausedStates[userId] = true;
    userPauseTimestamp[userId] = Date.now();
    updateUserState(userId, { currentCase: "admin_case" });
    return [{
      type: "text",
      text: "‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏π‡πÅ‡∏•‡∏û‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡πâ‡∏≤ ‡∏ô‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡∏Ñ‡πà‡∏∞ üíï"
    }];
  }

  // == Follow/‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
  if (event.type === "follow" && shouldGreet(userId)) {
    reply.push({ type: "text", text: "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏ô‡πâ‡∏≠‡∏á‡∏ü‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏î‡∏π‡πÅ‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≠‡∏á PGTHAI289 ‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï" });
    reply.push({ type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() });
    updateUserState(userId, { lastFlexSent: Date.now(), lastGreeted: Date.now() });
    await notifyAdmin(event, "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà");
    return reply;
  }

  // == Postback == 
  if (event.type === "postback" && event.postback?.data) {
    const data = event.postback.data;
    reply.push({ type: "text", text: `‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°: ${data}` });
    let msg = "";
    if (data === "register_admin") { msg = "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ/‡∏ß‡∏≠‡πÄ‡∏•‡∏ó ‡πÅ‡∏•‡∏∞‡πÑ‡∏≠‡∏î‡∏µ‡πÑ‡∏•‡∏ô‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï"; userPausedStates[userId] = true; userPauseTimestamp[userId] = Date.now(); }
    if (data === "login_backup") { msg = "‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡πà‡∏∞ üíï"; userPausedStates[userId] = true; userPauseTimestamp[userId] = Date.now(); }
    if (data === "issue_deposit") { msg = "‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠+‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏∞‡∏Ñ‡∏∞ üíï"; userPausedStates[userId] = true; userPauseTimestamp[userId] = Date.now(); }
    if (data === "forgot_password") { msg = "‡πÅ‡∏à‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠+‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏ß‡πâ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏ô‡πâ‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏∞ üíï"; userPausedStates[userId] = true; userPauseTimestamp[userId] = Date.now(); }
    if (data === "promo_info") { msg = "‡∏û‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Ñ‡∏∞ ‡∏ö‡∏≠‡∏• ‡∏™‡∏•‡πá‡∏≠‡∏ï ‡∏´‡∏ß‡∏¢ ‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ üíï"; userPausedStates[userId] = true; userPauseTimestamp[userId] = Date.now(); }
    if (data === "review_withdraw") { msg = await generateWithdrawReviewMessage(); }
    if (data === "max_withdraw") { msg = await generateMaxWithdrawMessage(); }
    if (data === "top_game") { msg = await generateTopGameMessage(); }
    if (data === "referral_commission") { msg = await generateReferralCommissionMessage(); }
    reply.push({ type: "text", text: msg });
    await notifyAdmin(event, `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° ${data}`);
    return reply;
  }

  // == ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (admin_case)
  if (state.currentCase && (text.length > 3 || event.message?.type === "image")) {
    reply.push({ type: "text", text: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ üíï" });
    userPausedStates[userId] = true;
    userPauseTimestamp[userId] = Date.now();
    await notifyAdmin(event, `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏Ñ‡∏™ ${state.currentCase}): ${text || "‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ"}`);
    return reply;
  }

  // == ‡∏™‡πà‡∏á Flex ‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
  if (event.type === "message" && shouldSendFlex(userId)) {
    reply.push({ type: "flex", altText: "üéÄ ‡πÄ‡∏°‡∏ô‡∏π‡∏û‡∏¥‡πÄ‡∏®‡∏©", contents: createFlexMenuContents() });
    updateUserState(userId, { lastFlexSent: Date.now() });
  }

  // == GPT ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏Ç‡∏µ‡πâ‡∏≠‡πâ‡∏≠‡∏ô/‡∏â‡∏•‡∏≤‡∏î/‡∏´‡∏≤ info ‡∏™‡∏î ==
  try {
    const now = Date.now();
    if (!state.assistantName || now - state.lastGreeted > 10 * 60 * 1000) {
      const newName = getRandomAssistantName();
      updateUserState(userId, { assistantName: newName, lastGreeted: now });
      state.assistantName = newName;
    }
    const assistantName = state.assistantName;
    const sentiment = analyzeSentiment(text);
    const historyContext = state.chatHistory.map(h => `${h.role}: ${h.content}`).join('\n');
    let realData = "";
    if (sentiment === "info" || text.length > 5) realData = await fetchRealData(text);
    const gptPrompt = buildPrompt(assistantName, historyContext, realData, sentiment, text);

    let gptReply = await getCuteDynamicReply(gptPrompt);
    gptReply = sanitizeReply(limitSentences(gptReply), assistantName);

    reply.push({
      type: "text",
      text: gptReply
    });

    state.chatHistory.push({ role: "user", content: text });
    state.chatHistory.push({ role: "assistant", content: gptReply });
    updateUserState(userId, state);

    if (gptReply.trim().startsWith("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")) {
      updateUserState(userId, { lastGreeted: now });
    }

    await notifyAdmin(event, text || "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°/‡∏£‡∏π‡∏õ");
    return reply;
  } catch (err) {
    reply.push({
      type: "text",
      text: "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞‡∏Ñ‡∏∞ ‡∏£‡∏ö‡∏Å‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞ üíï"
    });
    return reply;
  }
}

// ================== CRM FOLLOW-UP (3,7,15,30 ‡∏ß‡∏±‡∏ô) ==================
function initCRM(lineClient) {
  setInterval(async () => {
    const now = Date.now();
    const followupPeriods = [
      { days: 3, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 3 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û" },
      { days: 7, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 7 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡∏î‡∏µ‡πÜ ‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà" },
      { days: 15, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 15 ‡∏ß‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏û‡∏π‡∏î‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô" },
      { days: 30, prompt: "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ä‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ 30 ‡∏ß‡∏±‡∏ô ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô PGTHAI289 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏î‡πá‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà" },
    ];

    for (const period of followupPeriods) {
      const inactive = Object.keys(userStates).filter(
        uid => now - (userStates[uid]?.lastActive || 0) > period.days * 24 * 60 * 60 * 1000
      );
      for (const uid of inactive) {
        try {
          const msg = await getCuteDynamicReply(period.prompt);
          await lineClient.pushMessage(uid, { type: "text", text: msg });
          await lineClient.pushMessage(uid, { type: "flex", altText: "üéÄ ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤ üéÄ", contents: createFlexMenuContents() });
          await sendTelegramAlert(`üì¢ CRM (${period.days} ‡∏ß‡∏±‡∏ô) ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤: ${uid}`);
          updateUserState(uid, { lastActive: Date.now() });
        } catch (err) {
          console.error("CRM Error", err);
        }
      }
    }
  }, 6 * 60 * 60 * 1000);
}

// ===== DEBUG LOG/HEALTH CHECK =====
export async function debugLogToTelegram(msg) {
  try { await sendTelegramAlert(`[DEBUG LOG] ${msg}`); } catch (err) { }
}

export function getBotHealthStatus() {
  return {
    totalUsers: Object.keys(userStates).length,
    globalPause,
    memoryUsageMB: (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2),
    uptimeMinutes: Math.floor(process.uptime() / 60)
  };
}

// === EXPORT AS MODULE (ESM) ===
export {
  handleCustomerFlow,
  tryResumeFromPause,
  createFlexMenuContents,
  initCRM,
  debugLogToTelegram,
  getBotHealthStatus
};
