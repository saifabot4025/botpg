// ================== FLOW MANAGER (ULTIMATE + CRM) ==================
import { getCuteDynamicReply } from "../services/gptService.js";
import { sendTelegramAlert, sendTelegramPhoto, getLineProfile } from "../services/telegramService.js";
import { getLineImage } from "../services/lineMediaService.js";
import line from "@line/bot-sdk";

// ================== STATE MANAGEMENT ==================
const userStates = {};
const userPausedStates = {};
const flexCooldown = 2 * 60 * 60 * 1000; // 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á

function getUserState(userId) {
  if (!userStates[userId]) {
    userStates[userId] = {
      lastFlexSent: 0,
      currentCase: null,
      caseData: {},
      lastActive: Date.now(),
      greeted: false,
    };
  }
  return userStates[userId];
}

function updateUserState(userId, newState) {
  userStates[userId] = { ...getUserState(userId), ...newState };
}

function shouldSendFlex(userId) {
  const state = getUserState(userId);
  return Date.now() - state.lastFlexSent > flexCooldown;
}

function randomMaskedPhone() {
  const prefix = "08";
  const suffix = Math.floor(1000 + Math.random() * 9000);
  return `${prefix}xxxx${suffix}`;
}

async function getRandomName() {
  const prompt = "‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏ô‡πÑ‡∏ó‡∏¢ 1 ‡∏ä‡∏∑‡πà‡∏≠ (‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢) ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ï‡∏≠‡∏ö‡πÅ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô";
  try {
    const name = await getCuteDynamicReply(prompt);
    return name.replace(/\n/g, "").trim();
  } catch {
    const fallbackNames = ["‡∏™‡∏°‡∏ä‡∏≤‡∏¢", "‡∏Å‡∏¥‡∏ï‡∏ï‡∏¥", "‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå", "‡∏ß‡∏µ‡∏£‡∏û‡∏•", "‡∏ì‡∏±‡∏ê‡∏û‡∏•", "‡∏õ‡∏Å‡∏£‡∏ì‡πå", "‡∏ô‡∏ó‡∏µ", "‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤"];
    return fallbackNames[Math.floor(Math.random() * fallbackNames.length)];
  }
}

// ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ú‡πà‡∏≤‡∏ô Telegram
async function notifyAdmin(event, message) {
  try {
    const profile = await getLineProfile(event.source?.userId);
    const displayName = profile?.displayName || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠";
    const oaName = process.env.LINE_OA_NAME || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö OA";

    const text = `üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å ${oaName}\nüë§ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${displayName}\nüí¨ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${message}`;
    await sendTelegramAlert(text);

    if (event.message?.type === "image" && event.message.id) {
      const photoBuffer = await getLineImage(event.message.id);
      if (photoBuffer) {
        await sendTelegramPhoto(photoBuffer, `üì∑ ‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (${displayName})`);
      }
    }
  } catch (err) {
    console.error("notifyAdmin Error:", err);
  }
}

// ================== RANDOMIZED MESSAGES ==================
let cachedMaxWithdrawDate = null;
let cachedMaxWithdrawAmount = null;
let cachedMaxWithdrawName = null;

async function generateWithdrawReviewMessage() {
  const reviews = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amount = (Math.floor(Math.random() * (50000 - 5000)) + 5000).toLocaleString();
    reviews.push(`‡∏¢‡∏π‡∏™ ${phone} ‡∏ñ‡∏≠‡∏ô ${amount}`);
  }
  return `üìä ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n\n${reviews.join("\n")}`;
}

async function generateMaxWithdrawMessage() {
  const today = new Date().toLocaleDateString("th-TH");
  if (cachedMaxWithdrawDate !== today) {
    cachedMaxWithdrawDate = today;
    cachedMaxWithdrawAmount = Math.floor(Math.random() * (500000 - 300000)) + 300000;
    cachedMaxWithdrawName = await getRandomName();
  }
  const phone = randomMaskedPhone();
  return `üëë ‡∏¢‡∏≠‡∏î‡∏ñ‡∏≠‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏û‡∏µ‡πà "${cachedMaxWithdrawName}" ‡∏¢‡∏π‡∏™ ${phone} ‡∏ñ‡∏≠‡∏ô ${cachedMaxWithdrawAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${cachedMaxWithdrawDate}`;
}

async function generateTopGameMessage() {
  const games = [
    "Graffiti Rush ‚Ä¢ ‡∏Å‡∏£‡∏≤‡∏ü‡∏ü‡∏¥‡∏ï‡∏µ‡πâ ‡∏£‡∏±‡∏ä",
    "Treasures of Aztec ‚Ä¢ ‡∏™‡∏≤‡∏ß‡∏ñ‡πâ‡∏≥",
    "Fortune Ox ‚Ä¢ ‡∏ß‡∏±‡∏ß‡πÇ‡∏î‡∏î",
    "Fortune Snake ‚Ä¢ ‡∏á‡∏π",
    "Fortune Rabbit ‚Ä¢ ‡πÄ‡∏Å‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡πà‡∏≤‡∏¢",
    "Lucky Neko ‚Ä¢ ‡∏•‡∏±‡∏Ñ‡∏Å‡∏µ‡πâ ‡πÄ‡∏ô‡πÇ‡∏Å‡∏∞ ‡πÅ‡∏°‡∏ß",
    "Fortune Mouse ‚Ä¢ ‡πÄ‡∏Å‡∏°‡∏´‡∏ô‡∏π‡∏™‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß",
    "Dragon Hatch ‚Ä¢ ‡πÄ‡∏Å‡∏°‡∏°‡∏±‡∏á‡∏Å‡∏£",
    "Wild Bounty Showdown ‚Ä¢ ‡∏Ñ‡∏≤‡∏ß‡∏ö‡∏≠‡∏¢",
    "Ways of the Qilin ‚Ä¢ ‡∏Å‡∏¥‡πÄ‡∏•‡∏ô",
    "Galaxy Miner ‚Ä¢ ‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡∏û‡∏≤‡πÇ‡∏ä‡∏Ñ",
    "Incan Wonders ‚Ä¢ ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ä‡∏ô‡πÄ‡∏ú‡πà‡∏≤",
    "Diner Frenzy Spins ‚Ä¢ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏°‡∏±‡πà‡∏á‡∏Ñ‡∏±‡πà‡∏á",
    "Dragon's Treasure Quest ‚Ä¢ ‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥",
    "Jack the Giant Hunter ‚Ä¢ ‡πÅ‡∏à‡πá‡∏Å‡∏ú‡∏π‡πâ‡∏Ü‡πà‡∏≤‡∏¢‡∏±‡∏Å‡∏©‡πå",
  ];
  const selected = games.sort(() => 0.5 - Math.random()).slice(0, 5);
  const randomPercent = () => Math.floor(Math.random() * 50) + 50;
  const freeSpinAmount = Math.floor(Math.random() * (200000 - 20000)) + 20000;
  const normalAmount = Math.floor(Math.random() * (50000 - 3000)) + 3000;

  let msg = "üé≤ ‡πÄ‡∏Å‡∏°‡∏™‡∏•‡πá‡∏≠‡∏ï‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n\n";
  selected.forEach((g, i) => {
    msg += `${i + 1}. ${g} - ${randomPercent()}%\n`;
  });
  msg += `\nüí• ‡∏ü‡∏£‡∏µ‡∏™‡∏õ‡∏¥‡∏ô‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${freeSpinAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  msg += `üí• ‡∏õ‡∏±‡πà‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ï‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${normalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
  msg += `‡πÄ‡∏•‡πà‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏ï‡∏Å‡∏ö‡πà‡∏≠‡∏¢ ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á üíï`;
  return msg;
}

async function generateReferralCommissionMessage() {
  const lines = [];
  for (let i = 0; i < 10; i++) {
    const phone = randomMaskedPhone();
    const amount = (Math.floor(Math.random() * (100000 - 3000)) + 3000).toLocaleString();
    lines.push(`‡∏¢‡∏π‡∏™ ${phone} ‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ${amount}`);
  }
  return `ü§ù ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏°‡∏°‡∏¥‡∏ä‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô\n\n${lines.join("\n")}\n\nüí° ‡∏ä‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô!`;
}

// ================== GPT INTENT ==================
async function analyzeUserIntent(userText) {
  const prompt = `
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Intent ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏ô‡∏±‡∏ô
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö: 
  "problem", "finance", "register", "general_question", "emotion"
- ‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ä‡πà‡∏ô: { "intent": "problem", "summary": "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤" }

‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "${userText}"
  `;
  try {
    const res = await getCuteDynamicReply(prompt);
    return JSON.parse(res);
  } catch {
    return { intent: "unknown", summary: userText };
  }
}

async function generateSmartReply(userText) {
  const intentData = await analyzeUserIntent(userText);
  let prompt = "";

  switch (intentData.intent) {
    case "emotion":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤ ${intentData.summary} 
‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏ß‡πá‡∏ö pgthai289 ‡πÄ‡∏ö‡∏≤ ‡πÜ`;
      break;
    case "general_question":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÉ‡∏ä‡πâ pgthai289`;
      break;
    case "register":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å 
‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏°‡∏±‡∏Ñ‡∏£ pgthai289 ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ñ‡πâ‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ`;
      break;
    case "finance":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ò‡∏µ‡∏ù‡∏≤‡∏Å-‡∏ñ‡∏≠‡∏ô pgthai289 ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡∏¥‡∏ç‡∏ä‡∏ß‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
      break;
    case "problem":
      prompt = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (${intentData.summary}) 
‡∏ï‡∏≠‡∏ö‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡πà‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ`;
      break;
    default:
      prompt = `‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏ä‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô pgthai289 ‡πÄ‡∏ö‡∏≤ ‡πÜ: "${userText}"`;
  }

  return await getCuteDynamicReply(prompt);
}

// ================== FLEX MENU ==================
function createFlexMenuContents() {
  return {
    type: "carousel",
    contents: [
      {
        type: "bubble",
        hero: { type: "image", url: "https://i.ibb.co/SqbNcr1/image.jpg", size: "full", aspectRatio: "20:13", aspectMode: "cover" },
        body: {
          type: "box",
          layout: "vertical",
          contents: [
            { type: "text", text: "üíé ‡∏™‡∏°‡∏±‡∏Ñ‡∏£ + ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤", weight: "bold", size: "lg", color: "#8E44AD" },
            { type: "text", text: "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö‡∏ï‡∏£‡∏á PGTHAI289 ‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á üíØ ‡∏à‡πà‡∏≤‡∏¢‡∏à‡∏£‡∏¥‡∏á üíµ", size: "sm", color: "#4A235A", margin: "sm" },
          ],
        },
        footer: {
          type: "box",
          layout: "vertical",
          spacing: "sm",
          contents: [
            { type: "button", style: "primary", color: "#8E44AD", height: "sm", action: { type: "uri", label: "‚ú® ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏≠‡∏á", uri: "https://pgthai289.net/customer/register/LINEBOT/?openExternalBrowser=1" } },
            { type: "button", style: "primary", color: "#8E44AD", height: "sm", action: { type: "postback", label: "ü§ç ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡πâ", data: "register_admin" } },
            { type: "button", style: "primary", color: "#8E44AD", height: "sm", action: { type: "uri", label: "üé∞ ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏Å", uri: "https://pgthai289.net/?openExternalBrowser=1" } },
            { type: "button", style: "primary", color: "#8E44AD", height: "sm", action: { type: "postback", label: "üõ° ‡∏ó‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡∏£‡∏≠‡∏á", data: "login_backup" } },
          ],
        },
        styles: { footer: { separator: true } },
      },
      // BOX 2 ‡πÅ‡∏•‡∏∞ BOX 3 (‡πÅ‡∏à‡πâ‡∏á‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞ ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß & ‡πÄ‡∏Å‡∏°‡πÅ‡∏ï‡∏Å) ‡∏Ñ‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    ],
  };
}

// ================== MAIN FLOW + CRM ==================
export async function handleCustomerFlow(event) {
  // ... [‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å handleCustomerFlow ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ]
}

export function initCRM(lineClient) {
  setInterval(async () => {
    const now = Date.now();
    const inactiveUsers = Object.keys(userStates).filter(
      (uid) => now - userStates[uid].lastActive > 3 * 24 * 60 * 60 * 1000
    );

    for (const uid of inactiveUsers) {
      try {
        const msg = await generateTopGameMessage();
        await lineClient.pushMessage(uid, { type: "text", text: msg });
        await sendTelegramAlert(`üì¢ CRM ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${uid}`);
        updateUserState(uid, { lastActive: Date.now() });
      } catch (err) {
        console.error("CRM Error:", err);
      }
    }
  }, 6 * 60 * 60 * 1000);
}

export {
  getUserState,
  updateUserState,
  shouldSendFlex,
  notifyAdmin,
  randomMaskedPhone,
  generateWithdrawReviewMessage,
  generateMaxWithdrawMessage,
  generateTopGameMessage,
  generateReferralCommissionMessage,
  generateSmartReply,
  analyzeUserIntent,
  createFlexMenuContents,
};
